'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ENV = undefined;
exports.debug = debug;
exports.info = info;
exports.warn = warn;
exports.error = error;

var _cliColor = require('cli-color');

var _webrewHelpersDebug = require('webrew-helpers-debug');

var ENV = exports.ENV = typeof process.env.ENV !== 'undefined' ? false : process.env.ENV;

function debug() {
    var date = new Date().toTimeString('HH:mm:ss').replace(/\ .+/, '');
    var args = Array.prototype.slice.call(arguments);
    args.unshift((0, _cliColor.xterm)(220)('[' + date + '][DEBUG]'));
    _webrewHelpersDebug.DEBUG && console.log.apply(console, args);
}

function info() {
    var date = new Date().toTimeString('HH:mm:ss').replace(/\ .+/, '');
    var args = Array.prototype.slice.call(arguments);
    args.unshift((0, _cliColor.xterm)(44)('[' + date + '][INFO]'));
    console.log.apply(console, args);
}

function warn() {
    var date = new Date().toTimeString('HH:mm:ss').replace(/\ .+/, '');
    var args = Array.prototype.slice.call(arguments);
    args.unshift((0, _cliColor.xterm)(202)('[' + date + '][WARN]'));
    console.log.apply(console, args);
}

function error() {
    var date = new Date().toTimeString('HH:mm:ss').replace(/\ .+/, '');
    var args = Array.prototype.slice.call(arguments);
    args.unshift((0, _cliColor.xterm)(160)('[' + date + '][ERROR]'));
    console.log.apply(console, args);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWJ1ZyIsImluZm8iLCJ3YXJuIiwiZXJyb3IiLCJFTlYiLCJwcm9jZXNzIiwiZW52IiwiZGF0ZSIsIkRhdGUiLCJ0b1RpbWVTdHJpbmciLCJyZXBsYWNlIiwiYXJncyIsIkFycmF5IiwicHJvdG90eXBlIiwic2xpY2UiLCJjYWxsIiwiYXJndW1lbnRzIiwidW5zaGlmdCIsImNvbnNvbGUiLCJsb2ciLCJhcHBseSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O1FBTWdCQSxLLEdBQUFBLEs7UUFPQUMsSSxHQUFBQSxJO1FBT0FDLEksR0FBQUEsSTtRQU9BQyxLLEdBQUFBLEs7O0FBM0JoQjs7QUFDQTs7QUFHTyxJQUFNQyxvQkFBTSxPQUFPQyxRQUFRQyxHQUFSLENBQVlGLEdBQW5CLG1CQUF5QyxLQUF6QyxHQUFpREMsUUFBUUMsR0FBUixDQUFZRixHQUF6RTs7QUFFQSxTQUFTSixLQUFULEdBQWlCO0FBQ3BCLFFBQUlPLE9BQU8sSUFBSUMsSUFBSixHQUFXQyxZQUFYLGFBQW9DQyxPQUFwQyxDQUE0QyxNQUE1QyxLQUFYO0FBQ0EsUUFBSUMsT0FBT0MsTUFBTUMsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCQyxTQUEzQixDQUFYO0FBQ0FMLFNBQUtNLE9BQUwsQ0FBYSxxQkFBTSxHQUFOLFFBQWVWLElBQWYsY0FBYjtBQUNBLGlDQUFTVyxRQUFRQyxHQUFSLENBQVlDLEtBQVosQ0FBa0JGLE9BQWxCLEVBQTJCUCxJQUEzQixDQUFUO0FBQ0g7O0FBRU0sU0FBU1YsSUFBVCxHQUFnQjtBQUNuQixRQUFJTSxPQUFPLElBQUlDLElBQUosR0FBV0MsWUFBWCxhQUFvQ0MsT0FBcEMsQ0FBNEMsTUFBNUMsS0FBWDtBQUNBLFFBQUlDLE9BQU9DLE1BQU1DLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQkMsU0FBM0IsQ0FBWDtBQUNBTCxTQUFLTSxPQUFMLENBQWEscUJBQU0sRUFBTixRQUFjVixJQUFkLGFBQWI7QUFDQVcsWUFBUUMsR0FBUixDQUFZQyxLQUFaLENBQWtCRixPQUFsQixFQUEyQlAsSUFBM0I7QUFDSDs7QUFFTSxTQUFTVCxJQUFULEdBQWdCO0FBQ25CLFFBQUlLLE9BQU8sSUFBSUMsSUFBSixHQUFXQyxZQUFYLGFBQW9DQyxPQUFwQyxDQUE0QyxNQUE1QyxLQUFYO0FBQ0EsUUFBSUMsT0FBT0MsTUFBTUMsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCQyxTQUEzQixDQUFYO0FBQ0FMLFNBQUtNLE9BQUwsQ0FBYSxxQkFBTSxHQUFOLFFBQWVWLElBQWYsYUFBYjtBQUNBVyxZQUFRQyxHQUFSLENBQVlDLEtBQVosQ0FBa0JGLE9BQWxCLEVBQTJCUCxJQUEzQjtBQUNIOztBQUVNLFNBQVNSLEtBQVQsR0FBaUI7QUFDcEIsUUFBSUksT0FBTyxJQUFJQyxJQUFKLEdBQVdDLFlBQVgsYUFBb0NDLE9BQXBDLENBQTRDLE1BQTVDLEtBQVg7QUFDQSxRQUFJQyxPQUFPQyxNQUFNQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkJDLFNBQTNCLENBQVg7QUFDQUwsU0FBS00sT0FBTCxDQUFhLHFCQUFNLEdBQU4sUUFBZVYsSUFBZixjQUFiO0FBQ0FXLFlBQVFDLEdBQVIsQ0FBWUMsS0FBWixDQUFrQkYsT0FBbEIsRUFBMkJQLElBQTNCO0FBQ0giLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB4dGVybSwgYmxhY2ssIHJlZCwgZ3JlZW4sIHllbGxvdywgYmx1ZSwgbWFnZW50YSwgY3lhbiwgd2hpdGUsIGdyYXkgfSBmcm9tICdjbGktY29sb3InXG5pbXBvcnQgeyBERUJVRyB9IGZyb20gJ3dlYnJldy1oZWxwZXJzLWRlYnVnJ1xuXG5cbmV4cG9ydCBjb25zdCBFTlYgPSB0eXBlb2YgcHJvY2Vzcy5lbnYuRU5WICE9PSBgdW5kZWZpbmVkYCA/IGZhbHNlIDogcHJvY2Vzcy5lbnYuRU5WXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCkudG9UaW1lU3RyaW5nKGBISDptbTpzc2ApLnJlcGxhY2UoL1xcIC4rLywgYGApXG4gICAgbGV0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgYXJncy51bnNoaWZ0KHh0ZXJtKDIyMCkoYFske2RhdGV9XVtERUJVR11gKSlcbiAgICBERUJVRyAmJiBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmdzKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5mbygpIHtcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCkudG9UaW1lU3RyaW5nKGBISDptbTpzc2ApLnJlcGxhY2UoL1xcIC4rLywgYGApXG4gICAgbGV0IGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgYXJncy51bnNoaWZ0KHh0ZXJtKDQ0KShgWyR7ZGF0ZX1dW0lORk9dYCkpXG4gICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJncylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHdhcm4oKSB7XG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSgpLnRvVGltZVN0cmluZyhgSEg6bW06c3NgKS5yZXBsYWNlKC9cXCAuKy8sIGBgKVxuICAgIGxldCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICAgIGFyZ3MudW5zaGlmdCh4dGVybSgyMDIpKGBbJHtkYXRlfV1bV0FSTl1gKSlcbiAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmdzKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZXJyb3IoKSB7XG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSgpLnRvVGltZVN0cmluZyhgSEg6bW06c3NgKS5yZXBsYWNlKC9cXCAuKy8sIGBgKVxuICAgIGxldCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKVxuICAgIGFyZ3MudW5zaGlmdCh4dGVybSgxNjApKGBbJHtkYXRlfV1bRVJST1JdYCkpXG4gICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJncylcbn0iXX0=